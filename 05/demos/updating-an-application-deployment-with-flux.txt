This exercise assumes a working Kubernetes cluster, with Flux installed and
configured according to the lab exercise in modules 3 and 4.

The kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/) command
line tool is required, as is an account on a git hosting provider, such as;
GitHub, GitLab, Bitbucket Server, AWS CodeCommit, or Azure DevOps.

The instructions in this lab exercise relate to GitHub as the git host
provider, so if you're using a different git host provider, amend the commands
to suit. Information concerning the 'yq' utility, can be found at the following
URL: https://mikefarah.gitbook.io/yq/.

Exercise: UPDATING AN APPLICATION DEPLOYMENT WITH FLUX
++++++++++++++++++++++++++++++++++++++++++++++++++++++

1.  Check the version of the nginxhello app that is configured in the expressed
    desired state, by inspecting the manifest for the Deployment resource in
    the cloned local copy of the deployment repo.

cat gitops-lab-deploy/deploy/deployment.yaml | \
  yq '.spec.template.spec.containers[0].image'

2.  Satisfy yourself that this is the version opf the app that is currently
    running in the cluster.

kubectl get deployments.apps nginxhello -o yaml | \
  yq '.spec.template.spec.containers[0].image'

3.  The app's image version, defined in the desired state configuration, could
    be updated with CI/CD automation, but this can be simulated by performing a
    manual change. Use your favorite editor, or the 'sed' command to perform an
    update, by changing the image tag from '1.19.0' to '1.20.2'.

sed -i s/1.19.0/1.20.2/ gitops-lab-deploy/deploy/deployment.yaml

4.  In a new terminal window, establish a watch on the app's pods running in
    the cluster, either by using the 'watch' capability built into the kubectl
    command (kubectl get po --watch), or by using the 'watch' utility.

watch kubectl get po

5.  Stage and commit changes, before pushing the changes to the remote
    'gitops-lab-deploy' repo.

cd gitops-lab-deploy
git add -u
git commit -m "Bump application version to v1.20.2"
git push

6.  Allowing time for Flux to sync the changes made to the desred state, and
    whilst monitoring the watched pods in the other terminal window, get the
    GitRepository resource from the cluster. Make sure that the stored artifact
    has the same commit hash as that generated by the 'git commit' you
    performed. Observe Kubernetes performing a rolling update to the app.

kubectl get gitrepositories.source.toolkit.fluxcd.io nginxhello

7.  Check to make sure that the version of the app that is now running in the
    cluster is version '1.20.2'.

kubectl get deployments.apps nginxhello -o yaml | \
  yq '.spec.template.spec.containers[0].image'
